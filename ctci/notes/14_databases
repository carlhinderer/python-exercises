----------------------------------------------------------------
| CH 14 - DATABASES                                            |
----------------------------------------------------------------

- Explicit vs Implicit Joins

    - Explicit Join

        SELECT CourseName, TeacherName
        FROM Courses 
          INNER JOIN Teachers
          ON Courses.TeacherID = Teachers.TeacherID;


    - Implicit Join

        SELECT CourseName, TeacherName
        FROM Courses, Teachers
        WHERE Courses.TeacherID = Teachers.TeacherID;



- Denormalizing Databases

    - Normalized databases are optimized to minimize redundancy.  
      Denormalized databases are optimized to minimize read time.

    - We can denormalize a relational database by storing redundant data.



- SQL Example

    - Schema:

        Courses [CourseID*, CourseName, TeacherID]
        Teachers [TeacherID*, TeacherName]
        Students [StudentID*, StudentName]
        StudentCourses [CourseID*, StudentID*]


    - Note that these examples are for SQL Server.



- Query 1 - Students and Number of Courses

    - Get a list of of all students and how many courses each student is enrolled in.

    /* Naive, Incorrect Solution */
    SELECT Students.StudentName, count(* )
    FROM Students 
      INNER JOIN StudentCourses
      ON Students.StudentID = StudentCourses.StudentID
    GROUP BY Students.StudentID

    The above solution has 3 problems:

      1. We excluded students that aren't currently enrolled in any courses.  We need
           a LEFT JOIN instead.

      2. Even if we change it to a LEFT JOIN, we'd still get the wrong count since we'd
          be counting students instead of courses.

      3. We have multiple student names in each group.  Even if they are all the same,
          we need to select the first one.


    /* Solution 1 - Wrap with another query */
    SELECT StudentName, Students.StudentID, Cnt
    FROM (
      SELECT Students.StudentID, count(StudentCourses.CourseID) as [Cnt]
      FROM Students 
        LEFT JOIN StudentCourses
        ON Students.StudentID = StudentCourses.StudentID
        GROUP BY Students.StudentID
      ) T INNER JOIN Students on T.studentID = Students.StudentID

    /* Solution 2 - Add StudentName to a GROUP BY clause */
    SELECT StudentName, Students.StudentID, count(StudentCourses.CourseID) as [Cnt]
    FROM Students 
      LEFT JOIN StudentCourses
      ON Students.StudentID = StudentCourses.StudentID
    GROUP BY Students.StudentID, Students.StudentName

    /* Solution 3 - Wrap with aggregate function. */
    SELECT max(StudentName) as [StudentName], 
           Students.StudentID,
           count(StudentCourses.CourseID) as [Count]
    FROM Students 
      LEFT JOIN StudentCourses
      ON Students.StudentID = StudentCourses.StudentID
    GROUP BY Students.StudentID



- Query 2 - Teacher Class Size

    - Get a list of all the teachers and the number of students they teach.  If the same
        teacher has the same student in 2 different courses, they should both be counted.
        Sort the list in descending order of the number of students a teacher teaches.

      /* First, we get the teacher IDs and how many students are associated with each. */
      SELECT TeacherID, count(StudentCourses.CourseID) AS [Number]
      FROM Courses 
        INNER JOIN StudentCourses
        ON Courses.CourseID = StudentCourses.CourseID
      GROUP BY Courses.TeacherID

      /* Now, we'll also include teachers who aren't teaching classes */
      SELECT TeacherName, isnull(StudentSize.Number, 0)
      FROM Teachers 
        LEFT JOIN (SELECT TeacherID, count(StudentCourses.CourseID) AS [Number]
                   FROM Courses 
                     INNER JOIN StudentCourses
                     ON Courses.CourseID = StudentCourses.CourseID
                   GROUP BY Courses.TeacherID) StudentSize 
        ON Teachers.TeacherID = StudentSize.TeacherID
      ORDER BY StudentSize.Number DESC



- Small Database Design



- Large Database Design



- Interview Questions

    14.1 Multiple Apartments: 

    Write a SQL query to get a list of tenants who are renting more than one apartment. 


    14.2 Open Requests: 

    Write a SQL query to get a list of all buildings and the number of 
      open requests (Requests in which status equals 'Open').


    14.3 Close All Requests: 

    Building #11 is undergoing a major renovation. Implement a query to close all requests 
      from apartments in this building.


    14.4 Joins: 

    What are the different types of joins? Please explain how they differ and why certain 
      types are better in certain situations.


    14.5 Denormalization: 

    What is denormalization? Explain the pros and cons.


    14.6 Entity-Relationship Diagram: 

    Draw an entity-relationship diagram for a database with companies. people, and 
      professionals (people who work for companies).


    14.7 Design Grade Database: 

    Imagine a simple database storing information for students' grades. Design what this 
      database might look like and provide a SQL query to return a list of the honor roll 
      students (top 10%), sorted by their grade point average. 