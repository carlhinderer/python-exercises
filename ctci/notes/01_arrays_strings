----------------------------------------------------------------
| CH 1 - ARRAYS & STRINGS                                      |
----------------------------------------------------------------

- Steps

    1. Listen carefully
    2. Draw an example
    3. State a brute force solution
    4. Optimize
    5. Walk through to solidify understanding
    6. Implement
    7. Test

    Optimization Technique - Look for BUD
      Bottlenecks
      Unnecessary work
      Duplicated work

    Optimization Technique - DIY
    Optimization Technique - Simplify and Generalize
    Optimization Technique - Base Case and Build
    Optimization Technique - Data Structure Brainstorm



- Hash Tables

    - Here is a very simple implementation.

        # Create a hash table of size 10
        hash_table = [None] * 10


        # Simple hash function uses modulo
        def hashing_func(key):
            return key % len(hash_table)
         
        print(hashing_func(10)) # Output: 0
        print(hashing_func(20)) # Output: 0
        print(hashing_func(25)) # Output: 5


    - Inserting data into the hash table:

        # Insert data into hash table
        def insert(hash_table, key, value):
            hash_key = hashing_func(key)
            hash_table[hash_key] = value 
         
        insert(hash_table, 10, 'Nepal')
        print (hash_table)
        # Output: 
        # ['Nepal', None, None, None, None, None, None, None, None, None]
         
        insert(hash_table, 25, 'USA')
        print (hash_table)
        # Output: 
        # ['Nepal', None, None, None, None, 'USA', None, None, None, None]



- Dealing with Collisions

    - Now, we have to deal with collisions.  There are generally 2 ways to deal with 
        collisions:

        1. Linear probing
        2. Chaining


    - With linear probing, we can find the next open slot whenever there is a collision,
        and store the item in that open slot.  To search for an item, we start in the 
        the spot where it collided, and keep looking until we encounter an empty slot.


    - With chaining, we create a linked list for each slot.

        # Hash table is a list of lists
        hash_table = [[] for _ in range(10)]
        print(hash_table)


        # Inserting into hash table
        def insert(hash_table, key, value):
            hash_key = hashing_func(key)
            hash_table[hash_key].append(value)
         
        insert(hash_table, 10, 'Nepal')
        insert(hash_table, 25, 'USA')
        insert(hash_table, 20, 'India')
        print (hash_table)

        # Output: 
        # [['Nepal', 'India'], [], [], [], [], ['USA'], [], [], [], []]



- Standard Implementation of Hash Table

    - We'll use Python's standard 'hash' function for hash values.

        # Create a hash table
        hash_table = [[] for _ in range(10)]
        print(hash_table)


        # Insert data into hash table (actually upsert)
        def insert(hash_table, key, value):
            hash_key = hash(key) % len(hash_table)
            key_exists = False
            bucket = hash_table[hash_key]    
            for i, kv in enumerate(bucket):
                k, v = kv
                if key == k:
                    key_exists = True 
                    break
            if key_exists:
                bucket[i] = ((key, value))
            else:
                bucket.append((key, value))
        
        insert(hash_table, 10, 'Nepal')
        insert(hash_table, 25, 'USA')
        insert(hash_table, 20, 'India')
        print (hash_table)
        # Output:
        # [[(10, 'Nepal'), (20, 'India')], [], [], [], [], [(25, 'USA')], [], [], [], []]


        # Search the hash table
        def search(hash_table, key):
            hash_key = hash(key) % len(hash_table)    
            bucket = hash_table[hash_key]
            for i, kv in enumerate(bucket):
                k, v = kv
                if key == k:
                    return v
         
        print(search(hash_table, 10)) # Output: Nepal
        print(search(hash_table, 20)) # Output: India
        print(search(hash_table, 30)) # Output: None


        # Delete from the hash table
        def delete(hash_table, key):
            hash_key = hash(key) % len(hash_table)    
            key_exists = False
            bucket = hash_table[hash_key]
            for i, kv in enumerate(bucket):
                k, v = kv 
                if key == k:
                    key_exists = True 
                    break
            if key_exists:
                del bucket[i]
                print ('Key {} deleted'.format(key))
            else:
                print ('Key {} not found'.format(key))

        delete(hash_table, 100)
        print (hash_table)
        # Output:
        # Key 100 not found
        # [[(10, 'Nepal'), (20, 'India')], [], [], [], [], [(25, 'USA')], [], [], [], []]
         
        delete(hash_table, 10)
        print (hash_table)
        # Output:
        # Key 10 deleted
        # [[(20, 'India')], [], [], [], [], [(25, 'USA')], [], [], [], []]



- ArrayList and Resizable Arrays

- StringBuilder


- Interview Questions 

    1.1 Is Unique: 
    
    Implement an algorithm to determine if a string has all unique characters. What if you 
      cannot use additional data structures? 
    
    
    1.2 Check Permutation: 
    
    Given two strings, write a method to decide if one is a  permutation of the other. 
    
    
    1.3 URLify: 
    
    Write a method to replace all spaces in a string with '%20: You may assume that the 
      string has sufficient space at the end to hold the additional characters, and that 
      you are given the "true" length of the string. (Note: If implementing in Java, please 
      use a character array so that you can perform this operation in place.) 
    
    EXAMPLE Input: "Mr John Smith "J 13 Output: "Mr%20J ohn%20Smith" 
    
    
    1.4 Palindrome Permutation: 
    
    Given a string, write a function to check if it is a permutation of a palindrome. A 
      palindrome is a word or phrase that is the same forwards and backwards. A permutation 
      is a rearrangement of letters. The palindrome does not need to be limited to just 
      dictionary words. 
    
    EXAMPLE Input: Tact Coa Output: True (permutations: "taco cat". "atco cta". etc.) 
    
    
    1.5 One Away: 
    
    There are three types of edits that can be performed on strings: insert a character, 
      remove a character, or replace a character. Given two strings, write a function to 
      check if they are one edit (or zero edits) away. 
    
    EXAMPLE pale, pIe -> true pales. pale -> true pale. bale -> true pale. bake -> false 
    
    
    1.6 String Compression: 
    
    Implement a method to perform basic string compression using the counts of repeated 
      characters. For example, the string aabcccccaaa would become a2b1c5a3. If the 
      "compressed" string would not become smaller than the original string, your method 
      should return the original string. You can assume the string has only uppercase 
      and lowercase letters (a -z). 
    
    
    1.7 Rotate Matrix: 
    
    Given an image represented by an NxN matrix, where each pixel in  the image is 4 bytes, 
      write a method to rotate the image by 90 degrees. (an you do this in place? 
    
    
    1.8 Zero Matrix: 
    
    Write an algorithm such that if an element in an MxN matrix is 0, its entire row and 
      column are set to O. 
    
    
    1.9 String Rotation: 
    
    Assume you have a method isSubst ring which checks if one word is a substring of 
      another. Given two strings, 51 and 52, write code to check if 52 is a rotation of 
      51 using only one call to isSubstring (e.g., "waterbottle" is a rotation of
      "erbottlewat"). 